AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

# Resources:
#   MyApi:
#     Type: AWS::Serverless::Api
#     Properties:
#       StageName: dev
#       Auth:
#         DefaultAuthorizer: MyLambdaTokenAuthorizer
#         Authorizers:
#           MyLambdaTokenAuthorizer:
#             FunctionArn: !GetAtt MyAuthFunction.Arn

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyCognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers: 
          MyCognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  HelloFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: handler.hello
      Runtime: nodejs10.x
      CodeUri: ./hello
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /hello
            Method: GET

  MyAuthFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./authorizer
      Handler: handler.authorizer
      Runtime: nodejs10.x

  myDynamoDBTableClient:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "clientid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "clientid"
          KeyType: "HASH"
      TableName: "Client"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  myDynamoDBTableUser:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userid"
          KeyType: "HASH"
      TableName: "User"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # Generate a name based on the stage
      UserPoolName: sample-bank-user-pool
      # Set email as an alias
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      # Generate an app client name based on the stage
      ClientName: sample-bank-user-pool-client
      UserPoolId:
        Ref: CognitoUserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      # Generate a name based on the stage
      IdentityPoolName: sample-bank-IdentityPool
      # Don't allow unathenticated users
      AllowUnauthenticatedIdentities: false
      # Link to our User Pool
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolClient
          ProviderName:
            Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref MyApi

  ApiUrl:
    Description: "API endpoint URL for dev environment"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"

  UserPoolId:
    Value:
      Ref: CognitoUserPool

  UserPoolClientId:
    Value:
      Ref: CognitoUserPoolClient
  
  IdentityPoolId:
    Value:
      Ref: CognitoIdentityPool
